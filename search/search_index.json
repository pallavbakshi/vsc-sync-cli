{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"VSC Sync CLI","text":"<p>Synchronise your VS Code settings, extensions and snippets across multiple workstations with a single command-line tool.</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>One-command bootstrap \u2013 <code>vsc-sync init</code></li> <li>Cross-platform secrets storage (Keychain, Credential Manager, Gnome Keyring)</li> <li>Handles settings.json, keybindings, user snippets and more</li> <li>Dry-run / diff mode so nothing ever clobbers your local setup by accident</li> </ul>"},{"location":"#what-is-it","title":"What is it?","text":"<p><code>vsc-sync</code> is a lightweight wrapper around Git that stores your personal VS Code configuration in a private repository.  Unlike Settings Sync it works completely offline, integrates with existing dot-files, and can be fully automated inside CI scripts or bootstrap shells.</p> <pre><code>$ vsc-sync status\n\u2714 settings.json         in sync\n\u2714 extensions            in sync\n\u2718 snippets/python.json  local has changes\n</code></pre>"},{"location":"#quick-links","title":"Quick links","text":"<ul> <li>Installation \u2013 clone &amp; editable install</li> <li>Usage \u2013 day-to-day commands</li> <li>API reference \u2013 Python import-level docs</li> </ul> <p>Need help? Open an issue or chat with us on the <code>#vsc-sync</code> Discord channel!</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Initial MkDocs documentation site.</li> <li><code>--tasks/--no-tasks</code> flag to sync tasks.json.</li> <li><code>--sort</code> flag for keybindings.json to alphabetise bindings and group them by   <code>when</code> clause specificity.</li> </ul>"},{"location":"for-developers/","title":"For developers","text":"<p>This page explains how to set up a development environment for VSC Sync CLI, run the test-suite, lint the code and contribute patches.</p>"},{"location":"for-developers/#1-clone-the-repository","title":"1 \u00b7 Clone the repository","text":"<pre><code>git clone https://github.com/your-org/vsc-sync-cli.git\ncd vsc-sync-cli\n</code></pre>"},{"location":"for-developers/#2-create-a-virtual-environment-uv","title":"2 \u00b7 Create a virtual environment (uv)","text":"<p>We use uv for blister-fast dependency installs, but regular <code>python -m venv</code> works as well.</p> <pre><code>uv venv .venv\nsource .venv/bin/activate        # Windows: .venv\\Scripts\\activate\n\n# Install runtime + dev dependencies\nuv pip install -r requirements.txt        # if provided\nuv pip install -r requirements-dev.txt    # linting / tests\n\n# Or, if lock-files are not present\nuv pip install -e .[dev]                  # editable install with extras\n</code></pre>"},{"location":"for-developers/#3-run-the-test-suite","title":"3 \u00b7 Run the test-suite","text":"<pre><code>pytest -q        # run all tests\npytest -q tests/core/test_config_manager.py  # single module\n</code></pre> <p>Coverage report:</p> <pre><code>pytest --cov=vsc_sync --cov-report=term-missing --cov-report=html\nopen htmlcov/index.html\n</code></pre>"},{"location":"for-developers/#4-code-quality-tooling","title":"4 \u00b7 Code quality tooling","text":"<p>The project uses ruff for linting/formatting and pre-commit to make sure checks pass before each commit.</p> <pre><code># one-off setup\npre-commit install\n\n# run everything against the entire repo\npre-commit run --all-files\n</code></pre>"},{"location":"for-developers/#5-building-the-docs-locally","title":"5 \u00b7 Building the docs locally","text":"<p>Instructions live in Installation \u2192 Option B (uv).  Once the tool-chain is installed:</p> <pre><code>mkdocs serve\n# http://127.0.0.1:8000\n</code></pre>"},{"location":"for-developers/#6-release-checklist-maintainers","title":"6 \u00b7 Release checklist (maintainers)","text":"<ol> <li>Bump version in <code>src/vsc_sync/__init__.py</code> and <code>pyproject.toml</code>.</li> <li>Update <code>CHANGELOG.md</code>.</li> <li><code>tox -e build</code> or <code>python -m build</code>.</li> <li><code>twine upload dist/*</code>.</li> <li><code>git tag vX.Y.Z &amp;&amp; git push --tags</code>.</li> <li><code>mkdocs gh-deploy --force</code> to publish updated docs.</li> </ol>"},{"location":"for-developers/#useful-tox-environments","title":"Useful tox environments","text":"Command Purpose <code>tox -e py311</code> Run unit tests on Python 3.11 <code>tox -e lint</code> Ruff + mypy + import-sort <code>tox -e docs</code> Ensure docs build cleanly"},{"location":"how-it-works/","title":"How it works","text":"<p><code>vsc-sync</code> is essentially a thin Python wrapper around a Git repository that knows how to translate between VS Code\u2019s on-disk format and a portable, human-readable representation.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   read   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 VS Code app  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 \u2502    parsers     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n                                 \u25bc\n                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  commit  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                       \u2502 dot-files repo     \u2502 \u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 git backend \u2502\n                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"how-it-works/#storage-layout","title":"Storage layout","text":"<p>The repository created by <code>vsc-sync init</code> looks like this:</p> <pre><code>.vsc-sync/\n\u251c\u2500\u2500 extensions.txt   # frozen extension list\n\u251c\u2500\u2500 settings.json    # base settings\n\u2514\u2500\u2500 snippets/\n    \u251c\u2500\u2500 python.json\n    \u2514\u2500\u2500 javascript.json\n</code></pre> <p>All files live under a single directory so your home folder stays tidy.</p>"},{"location":"how-it-works/#security","title":"Security","text":"<p>No credentials ever touch disk.  Tokens are stored in your OS\u2019s credential store using the <code>keyring</code> library.</p>"},{"location":"how-it-works/#under-the-hood","title":"Under the hood","text":"<ul> <li>File operations \u2013 <code>vsc_sync.core.file_ops</code></li> <li>Git plumbing \u2013 <code>vsc_sync.core.git_ops</code></li> <li>Config management \u2013 <code>vsc_sync.core.config_manager</code></li> </ul> <p>Dive into the API reference if you\u2019d like to use these building blocks programmatically.</p> <p>!!! warning \"Pull overwrites repository files\"     The <code>vsc-sync pull</code> command writes into your <code>vscode-configs</code> repository.     Any existing files in the target layer will be replaced (after a prompt,     unless you pass <code>--overwrite</code>).  Make sure you commit or back-up before     pulling large changes.</p>"},{"location":"installation/","title":"Installation","text":"<p>At the moment VSC Sync CLI is not yet published on PyPI or Homebrew.  Until the first public release drops you can install it straight from the Git repository.</p>"},{"location":"installation/#1-clone-the-repository","title":"1 \u00b7 Clone the repository","text":"<pre><code>git clone https://github.com/your-org/vsc-sync-cli.git\ncd vsc-sync-cli\n</code></pre>"},{"location":"installation/#2-create-a-virtual-environment-optional-but-recommended","title":"2 \u00b7 Create a virtual environment (optional but recommended)","text":"<p>Using the standard library:</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate        # Windows: .venv\\Scripts\\activate\n</code></pre> <p>Or with the super-fast uv tool:</p> <pre><code>uv venv .venv\nsource .venv/bin/activate\n</code></pre>"},{"location":"installation/#3-install-the-package-in-editable-mode","title":"3 \u00b7 Install the package in editable mode","text":"<p>Editable (<code>-e</code>) installs mean changes you make to the source code are picked up immediately\u2014perfect for contributing patches or running the latest main branch.</p> <pre><code>pip install -e .[cli]\n# or, via uv\nuv pip install -e .[cli]\n</code></pre> <p>Note The <code>[cli]</code> extra brings in Typer, Rich and any runtime deps but deliberately excludes heavy dev-only tooling (pytest, ruff, etc.).  See For Developers if you need those as well.</p>"},{"location":"installation/#4-verify-installation","title":"4 \u00b7 Verify installation","text":"<pre><code>$ vsc-sync --version\nvsc-sync, version 0.3.0.dev (editable)\n</code></pre> <p>If a version string prints without errors you\u2019re good to go.</p>"},{"location":"installation/#keeping-up-to-date","title":"Keeping up to date","text":"<pre><code>git pull                       # grab the latest commit\npip install -e . --upgrade     # update editable install in-place\n</code></pre>"},{"location":"installation/#roadmap-to-pip-install-vsc-sync","title":"Roadmap to \u201cpip install vsc-sync\u201d","text":"<p>Once the API stabilises we\u2019ll publish:</p> <ul> <li>PyPI wheels for Linux, macOS &amp; Windows</li> <li>Homebrew formula for one-line macOS / Linux installs</li> <li>Stand-alone binaries via GitHub Releases</li> </ul> <p>Stay tuned!  In the meantime the git-clone method above is the official way to get the tool.</p>"},{"location":"template-config/","title":"Template configuration repository","text":"<p>Below is a fully-featured example of how you can organise your VS Code configuration repository when using VSC Sync CLI.  Feel free to clone this layout and trim whatever you don\u2019t need \u2013 the tool works fine with only the <code>base/</code> directory if that\u2019s all you care about.</p> <pre><code>.\n\u251c\u2500\u2500 base/                 # Settings &amp; snippets applied everywhere\n\u2502   \u251c\u2500\u2500 settings.json\n\u2502   \u251c\u2500\u2500 keybindings.json\n\u2502   \u251c\u2500\u2500 extensions.json\n\u2502   \u251c\u2500\u2500 tasks.json\n\u2502   \u2514\u2500\u2500 snippets/\n\u2502       \u2514\u2500\u2500 global.code-snippets\n\u2502\n\u251c\u2500\u2500 stacks/               # Language-specific overlays (Python, JS, Go\u2026)\n\u2502   \u251c\u2500\u2500 python/\n\u2502   \u2502   \u251c\u2500\u2500 settings.json\n\u2502   \u2502   \u251c\u2500\u2500 keybindings.json\n\u2502   \u2502   \u251c\u2500\u2500 extensions.json\n\u2502   \u2502   \u251c\u2500\u2500 tasks.json\n\u2502   \u2502   \u2514\u2500\u2500 snippets/python.code-snippets\n\u2502   \u2514\u2500\u2500 javascript/\n\u2502       \u251c\u2500\u2500 settings.json\n\u2502       \u251c\u2500\u2500 extensions.json\n\u2502       \u2514\u2500\u2500 snippets/javascript.code-snippets\n\u2502\n\u251c\u2500\u2500 apps/                 # Editor-flavoured overrides (VS Code, VSCodium\u2026)\n\u2502   \u251c\u2500\u2500 vscode/\n\u2502   \u2502   \u251c\u2500\u2500 settings.json\n\u2502   \u2502   \u251c\u2500\u2500 keybindings.json\n\u2502   \u2502   \u2514\u2500\u2500 extensions.json\n\u2502   \u2502   \u2514\u2500\u2500 tasks.json\n\u2502   \u2514\u2500\u2500 vscodium/\n\u2502       \u251c\u2500\u2500 settings.json\n\u2502       \u2514\u2500\u2500 extensions.json\n\u2502\n\u251c\u2500\u2500 projects/             # Per-project configs (workspaceSettingsPath)\n\u2502   \u251c\u2500\u2500 react-app/\n\u2502   \u2502   \u251c\u2500\u2500 settings.json\n\u2502   \u2502   \u2514\u2500\u2500 extensions.json\n\u2502   \u2514\u2500\u2500 generic-python-api/\n\u2502       \u251c\u2500\u2500 settings.json\n\u2502       \u2514\u2500\u2500 extensions.json\n\u2502\n\u2514\u2500\u2500 README.md             # Explain how to consume the repo\n</code></pre>"},{"location":"template-config/#how-merging-works","title":"How merging works","text":"<p><code>vsc-sync apply</code> assembles the final configuration for a machine in four steps:</p> <ol> <li>Start with base/ files.</li> <li>Overlay the relevant stacks/ directory if <code>--stack</code> is provided    (e.g. <code>python</code>).</li> <li>Overlay the apps/ directory that matches the running editor    (auto-detected or via <code>--app vscodium</code>).</li> <li>If inside a repo that has a matching directory under projects/, those    files win last.</li> </ol> <p>Each overlay can override or extend keys.  Lists (like extensions) are merged uniquely so duplicates are removed.</p> <p><code>tasks.json</code> follows the same winner-takes-all rule as <code>keybindings.json</code> \u2013 only the file from the highest-priority layer is copied.</p>"},{"location":"usage/","title":"Usage","text":"<p>After installing the CLI there are six high-level commands you\u2019ll use regularly.</p> Command Purpose <code>init</code> Bootstrap a fresh machine by cloning the dot-files repository <code>status</code> Show diff between local VS Code config and repository <code>apply</code> Pull remote changes and write them into your local VS Code profile (settings, keybindings, tasks, snippets, extensions) <code>edit</code> Push your current VS Code config to the repository <code>pull</code> Pull remote repository without touching local VS Code files <code>setup-project</code> Create a per-project sync config (workspaces) <p>Run any command with <code>-h/--help</code> for detailed flags, e.g.:</p> <pre><code>vsc-sync edit --dry-run --verbose\n</code></pre>"},{"location":"usage/#typical-workflow","title":"Typical workflow","text":"<ol> <li>Set up the first machine:</li> </ol> <p><code>bash    vsc-sync init git@github.com:pb/dotfiles-vscode.git</code></p> <ol> <li> <p>Make changes in VS Code (install extensions, tweak settings).</p> </li> <li> <p>Persist those changes:</p> </li> </ol> <p><code>bash    vsc-sync edit -m \"Enable Ruff linter\"</code></p> <ol> <li>On another machine:</li> </ol> <p><code>bash    vsc-sync apply   # pulls and writes config locally</code></p>"},{"location":"usage/#pulling-changes-back-into-the-repo","title":"Pulling changes back into the repo","text":"<p><code>vsc-sync pull</code> copies configuration from an editor (or project) into your <code>vscode-configs</code> repository layer. Existing files in the target layer are overwritten after a confirmation prompt\u2014use <code>--overwrite</code> to skip the prompt if you\u2019re scripting.</p> <p>Examples</p> <pre><code># pull settings.json only (default behaviour)\nvsc-sync pull vscode --to base\n\n# pull keybindings but leave settings.json untouched\nvsc-sync pull vscodium --to base --no-settings --keybindings\n\n# pull everything and overwrite without asking (dangerous!)\nvsc-sync pull vscode --to base \\\n  --keybindings --extensions --snippets \\\n  --overwrite\n</code></pre> <p>Always inspect the diff and commit your repository after a pull so that you can revert unintended changes.</p>"},{"location":"usage/#advanced-flags","title":"Advanced flags","text":"<ul> <li><code>--diff</code> \u2013 print patch instead of writing files.</li> <li><code>--no-tasks</code> \u2013 skip syncing tasks.json (enabled by default).</li> <li><code>--force</code> \u2013 overwrite local changes even if conflict detected.</li> </ul>"},{"location":"usage/#sorting-keybindings","title":"Sorting keybindings","text":"<p>Need a tidy, alphabetised keybindings list that groups general shortcuts before their more specific variants?</p> <pre><code>vsc-sync edit base --keybindings --sort --yes\n</code></pre> <p>The command will: 1. Sort primarily by the <code>key</code> string, case-insensitive. 2. Within the same key it places shortcuts without a <code>when</code> clause first,    followed by increasingly specific variants (heuristic: fewer logical    operators and shorter length \u21d2 more general). 3. Keep duplicates intact so you can spot true copy-pastes versus intentional    overlaps. 4. Rewrite the file with 2-space indentation.</p> <p>If you omit <code>--yes</code> you\u2019ll be prompted before the file is overwritten.</p>"},{"location":"usage/#applying-selectively","title":"Applying selectively","text":"<p>By default <code>vsc-sync apply</code> writes all components (settings, keybindings, extensions, snippets, tasks).  Use the additive flags below to restrict what gets applied:</p> Flag Effect <code>--settings</code> Include <code>settings.json</code>. If no component flag is provided, settings are included by default. <code>--keybindings</code> Include <code>keybindings.json</code>. <code>--extensions</code> Manage extensions (install and\u2014if <code>--prune-extensions</code> is also given\u2014uninstall). <code>--snippets</code> Copy the <code>snippets</code> directory. <code>--tasks / --no-tasks</code> Include or skip <code>tasks.json</code> (tasks are synced by default). <p>Examples</p> <pre><code># Only apply keybindings.json (nothing else will be touched)\nvsc-sync apply vscode --keybindings\n\n# Apply settings and extensions, leave snippets &amp; keybindings untouched\nvsc-sync apply vscode --settings --extensions --no-tasks\n</code></pre> <p>If none of the component flags are specified, the command behaves as before and syncs everything.</p> <p>See <code>vsc-sync &lt;command&gt; --help</code> for all options.</p>"},{"location":"behind-the-scenes/layer-precedence/","title":"Layer precedence &amp; conflict resolution","text":"<p>When VSC Sync CLI builds the final VS Code configuration for a machine it combines several layers of files. If the same setting appears in more than one layer, the layer applied last wins.  This page explains the exact order and the logic behind it.</p>"},{"location":"behind-the-scenes/layer-precedence/#precedence-order","title":"Precedence order","text":"<pre><code>base   \u2190 lowest priority\napp\nstack(s)  \u2190 highest priority (last one wins if multiple)\n</code></pre> <ol> <li>base/ \u2013 settings/snippets/extensions that should apply everywhere.</li> <li>apps// \u2013 overrides specific to the running editor (VS Code,    VSCodium, Cursor, \u2026). <li>stacks// \u2013 language- or framework-specific tweaks, e.g. <code>python</code>,    <code>web-dev</code>. If you pass multiple <code>--stack</code> options, they are applied in the    order given on the command line and the right-most one has the final say. <p>Projects :   <code>projects/&lt;repo-name&gt;/</code> layers sit outside this automatic merge because they     are copied verbatim into the workspace folder rather than into the     global user-profile.</p>"},{"location":"behind-the-scenes/layer-precedence/#what-happens-on-conflict","title":"What happens on conflict?","text":"<p>The merge algorithm lives in <code>vsc_sync/core/config_manager.py \u2192 LayerConfigManager.deep_merge_dicts</code>.</p> <p>\u2022 For every duplicate key, the value coming from the later layer replaces   the previous one.  \u2022 Nested dictionaries are merged recursively, so only the conflicting subtree   is replaced, not the entire parent. \u2022 Lists (like the <code>recommendations</code> array in <code>extensions.json</code>) are   concatenated and deduplicated to avoid duplicates.</p>"},{"location":"behind-the-scenes/layer-precedence/#example","title":"Example","text":"<p>Assume the setting <code>\"editor.tabSize\"</code> is defined in all three layers:</p> Layer Value base <code>2</code> app <code>4</code> stack <code>8</code> <p>Final output after <code>vsc-sync apply</code> \u2192 <code>\"editor.tabSize\": 8</code>.</p>"},{"location":"behind-the-scenes/layer-precedence/#keybindings-snippets","title":"Keybindings &amp; snippets","text":"<ul> <li><code>keybindings.json</code> is not merged. The file from the most specific layer   that provides it is copied (search order: last stack \u2192 first stack \u2192 app \u2192   base).</li> <li>Snippets directories from all layers are unioned and copied into the   target VS Code profile.</li> </ul>"},{"location":"behind-the-scenes/layer-precedence/#why-keybindings-are-not-merged","title":"Why keybindings are not merged","text":"<p>VS Code represents keybindings as an ordered list of objects. If two layers define shortcuts for the same keystroke VS Code keeps both entries and only the last one defined in the file wins, so na\u00efvely concatenating JSON arrays can lead to unpredictable behaviour.</p> <p>To keep things explicit vsc-sync takes the first <code>keybindings.json</code> it finds when scanning layers from most-specific to least and copies it verbatim into the user profile.  That means you get one authoritative place to edit shortcuts per machine configuration.</p> <p>If you need different keybindings for, say, Linux vs macOS: put the file in the corresponding app layer (<code>apps/vscode-linux/</code>, <code>apps/vscode-macos/</code>, \u2026) or create dedicated stacks (e.g. <code>stacks/linux</code>) and pass the appropriate <code>--stack</code> flag when applying.</p>"},{"location":"behind-the-scenes/layer-precedence/#take-away","title":"Take-away","text":"<p>When two layers disagree, ask \u201cwhich one is applied last?\u201d \u2014 that layer wins.</p> <p>Keeping this mental model in mind makes it easy to reason about the final configuration, even with many stacks and editor variants in play.</p>"},{"location":"behind-the-scenes/layer-precedence/#handy-tip-sort-your-keybindings","title":"Handy tip \u2013 sort your keybindings","text":"<p>Run:</p> <pre><code>vsc-sync edit base --keybindings --sort --yes\n</code></pre> <p>to get an alphabetised <code>keybindings.json</code> grouped by key and <code>when</code> clause so you can quickly spot overlaps or conflicts.  The command keeps all entries \u2013 even exact duplicates \u2013 because sometimes two identical shortcuts are deliberately defined in different extensions or contexts.</p> <p>Entries starting with a leading dash (<code>-</code>) naturally appear near the top because <code>-</code> sorts before letters in ASCII, making it easy to inspect chord prefixes (<code>-ctrl+k</code>, <code>-ctrl+w</code>, \u2026).</p>"},{"location":"for-developers/architecture/","title":"Project architecture","text":"<p>This document provides a high-level tour of the VSC Sync CLI codebase \u2014 the main layers, their responsibilities, and how they interact.  Reading it before diving into the source will save you a lot of time.</p> <pre><code>src/\n\u2514\u2500 vsc_sync/\n   \u251c\u2500 cli.py            \u2190 `typer` entry-point\n   \u251c\u2500 commands/         \u2190 One file per CLI sub-command\n   \u251c\u2500 core/             \u2190 Pure logic; no CLI / I/O coupling\n   \u251c\u2500 models.py         \u2190 Pydantic dataclasses shared everywhere\n   \u251c\u2500 config.py         \u2190 Global settings + paths\n   \u2514\u2500 utils.py          \u2190 Small cross-cutting helpers\n</code></pre>"},{"location":"for-developers/architecture/#1-cli-layer-srcvsc_syncclipy-commands","title":"1. CLI layer (<code>src/vsc_sync/cli.py</code> &amp; <code>commands/</code>)","text":"<ul> <li>Built with Typer (Click-based).  Each command lives in its own module under <code>vsc_sync.commands</code>.</li> <li>Responsibilities:</li> <li>Parse CLI arguments / options.</li> <li>Handle user-friendly output (rich console, colours, progress bars).</li> <li>Delegate all heavy lifting to the core layer.</li> <li>Absolutely no business logic should leak into the CLI; keep it thin.</li> </ul>"},{"location":"for-developers/architecture/#2-core-layer-srcvsc_synccore","title":"2. Core layer (<code>src/vsc_sync/core/</code>)","text":"<p>Pure Python functions and classes that can be imported by other programs or tested without spawning a subprocess.</p> <p>Modules:</p> Module Responsibility <code>file_ops.py</code> Read/write VS Code\u2019s settings.json, extensions list, snippets, etc. <code>git_ops.py</code> Thin wrapper around <code>GitPython</code> for clone, pull, push, branch ops <code>config_manager.py</code> Load, merge and validate <code>.vsc-sync.toml</code> configs <code>app_manager.py</code> Orchestration: coordinates file + git ops for <code>apply</code>, <code>edit</code>, \u2026 <p>Key property: the core never prints or reads from stdin \u2014 perfect for unit tests.</p>"},{"location":"for-developers/architecture/#3-models-srcvsc_syncmodelspy","title":"3. Models (<code>src/vsc_sync/models.py</code>)","text":"<p>Uses Pydantic for:</p> <ul> <li>Strongly-typed data interchange between layers.</li> <li>Validation of config files and API payloads.</li> </ul> <p>These models are serialisable to JSON (and TOML via helper functions) which simplifies caching and debugging.</p>"},{"location":"for-developers/architecture/#4-config-srcvsc_syncconfigpy","title":"4. Config (<code>src/vsc_sync/config.py</code>)","text":"<p>Centralised place for:</p> <ul> <li>Default paths (<code>~/.config/vsc-sync/\u2026</code>).</li> <li>Global constants (current version, environment variable names, exit codes).</li> </ul> <p>Keeping them in one file avoids a forest of <code>importlib.resources.path</code> calls scattered around the repo.</p>"},{"location":"for-developers/architecture/#5-utilities-srcvsc_syncutilspy","title":"5. Utilities (<code>src/vsc_sync/utils.py</code>)","text":"<p>Small helpers that don\u2019t belong anywhere else: coloured logging setup, temporary-directory context managers, etc.</p>"},{"location":"for-developers/architecture/#data-flow-for-vsc-sync-apply","title":"Data flow for <code>vsc-sync apply</code>","text":"<pre><code>flowchart TD\n    subgraph CLI\n        A[apply_cmd.py]\n    end\n    subgraph Core\n        B[app_manager.apply()]\n        C[file_ops.read_local()]\n        D[git_ops.pull()]\n        E[file_ops.write_local()]\n    end\n\n    A --&gt; B --&gt; C\n    B --&gt; D --&gt; E\n</code></pre> <ol> <li><code>apply_cmd</code> parses flags \u2192 calls <code>app_manager.apply(...)</code>.</li> <li><code>read_local</code> loads current VS Code state for diffing.</li> <li><code>git_ops.pull</code> ensures the dot-files repo is up-to-date.</li> <li><code>write_local</code> overwrites VS Code files with the latest repo version.</li> </ol> <p>All error handling bubbles up to <code>apply_cmd</code>, which converts Python exceptions into exit codes and pretty messages.</p>"},{"location":"for-developers/architecture/#dependency-diagram","title":"Dependency diagram","text":"<pre><code>graph LR\n  cli --&gt; commands\n  commands --&gt; core\n  core --&gt;|uses| models\n  core --&gt;|uses| config\n  commands --&gt; utils\n  core --&gt; utils\n</code></pre> <ul> <li>No arrow should ever point from core \u2192 commands or core \u2192 cli \u2014 this keeps the library usable without the CLI.</li> </ul>"},{"location":"for-developers/architecture/#testing-strategy","title":"Testing strategy","text":"<ul> <li>Unit tests target core functions directly for speed and determinism.</li> <li>Integration tests call the CLI via <code>click.testing.CliRunner</code> to validate end-to-end behaviour.</li> <li>Fixtures in <code>tests/conftest.py</code> spin up temporary git repos &amp; VS Code directories.</li> </ul> <p>Code coverage is enforced at 90 %+ on every PR.</p>"},{"location":"for-developers/architecture/#gotchas-foot-guns","title":"Gotchas / foot-guns","text":"<ol> <li>Platform paths: Use <code>pathlib.Path</code> everywhere; Windows back-slashes bite hard.</li> <li>Environment isolation: Tests should not touch the real <code>~/.vscode</code>.  Fixtures patch <code>os.environ[\"VSCODE_PORTABLE\"]</code> to redirect.</li> <li>Long-running git ops: Wrap them in threads; Click\u2019s progress bar needs the main thread.</li> </ol>"},{"location":"for-developers/architecture/#where-to-go-next","title":"Where to go next","text":"<ul> <li>Browse the API reference \u2014 each public function/class in core is documented there.</li> <li>Want to add a new CLI command?  Copy an existing file in <code>vsc_sync/commands/</code> and follow the patterns above.</li> </ul> <p>Happy hacking! \ud83d\udee0\ufe0f</p>"},{"location":"for-developers/docs-hosting/","title":"Hosting the documentation site","text":"<p>This page shows how to publish the MkDocs-generated site so everyone can read it at <code>https://your-org.github.io/vsc-sync-cli/</code>.</p> <p>We\u2019ll use GitHub Pages because it\u2019s free, requires zero infra and integrates directly with the repository\u2019s CI workflow.</p>"},{"location":"for-developers/docs-hosting/#1-create-a-deploy-token-one-off","title":"1 \u00b7 Create a deploy token (one-off)","text":"<p>If your repository is public, GitHub Actions can push to the <code>gh-pages</code> branch without any extra permission.</p> <p>For private repos you need a classic Personal Access Token (PAT) with the <code>repo</code> scope stored as a secret (e.g. <code>GH_PAGES_TOKEN</code>).</p>"},{"location":"for-developers/docs-hosting/#2-add-the-workflow-file","title":"2 \u00b7 Add the workflow file","text":"<p>Create <code>.github/workflows/docs.yml</code> (already scaffolded below).  The workflow:</p> <ol> <li>Checks out the repo</li> <li>Sets up Python 3.11</li> <li>Installs the MkDocs tool-chain</li> <li>Runs <code>mkdocs gh-deploy --force</code> which builds the site and pushes only    the static HTML into the <code>gh-pages</code> branch.</li> </ol> <pre><code>name: Docs\n\non:\n  push:\n    branches: [main]\n\npermissions:\n  contents: write            # allow push to gh-pages\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-python@v5\n        with:\n          python-version: '3.11'\n\n      - name: Install MkDocs stack\n        run: |\n          python -m pip install --upgrade pip\n          pip install mkdocs mkdocs-material \\\n                     mkdocstrings[python] \\\n                     mkdocs-gen-files \\\n                     mkdocs-section-index \\\n                     mkdocs-git-revision-date-localized-plugin\n\n      - name: Deploy\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # or GH_PAGES_TOKEN for private repos\n        run: |\n          mkdocs gh-deploy --clean --force\n</code></pre> <p>Commit and push this file to <code>main</code>.  GitHub Actions will build and deploy the docs on every push.</p>"},{"location":"for-developers/docs-hosting/#3-enable-pages-in-repository-settings","title":"3 \u00b7 Enable Pages in repository settings","text":"<ol> <li>Go to Settings \u2192 Pages.</li> <li>Source: choose GitHub Actions.</li> <li>Branch: select <code>gh-pages</code> if prompted.</li> <li>Click Save.</li> </ol> <p>GitHub will allocate a public URL such as <code>https://&lt;username&gt;.github.io/vsc-sync-cli/</code>.  You can also add a custom domain.</p>"},{"location":"for-developers/docs-hosting/#4-local-preview-vs-production","title":"4 \u00b7 Local preview vs production","text":"<ul> <li><code>mkdocs serve</code> \u2014 fast live-reload while editing docs.</li> <li><code>mkdocs gh-deploy --force --message \"preview\" --dry-run</code> \u2014 build exactly what   CI will ship but don\u2019t push it (good for troubleshooting warnings).</li> </ul>"},{"location":"for-developers/docs-hosting/#5-troubleshooting","title":"5 \u00b7 Troubleshooting","text":"Symptom Fix 404 after clicking a link Enable <code>use_directory_urls: true</code> (default) Old content despite successful deploy Clear browser cache; Pages caches aggressively Build fails on CI but not locally Pin package versions in <code>requirements-docs.txt</code> <p>Happy documenting! \ud83d\ude80</p>"},{"location":"tutorials/quick-start/","title":"Quick start","text":"<p>Follow this guide if you want to get up and running in less than five minutes.</p> <pre><code># 1. Install the CLI from source\ngit clone https://github.com/your-org/vsc-sync-cli.git\ncd vsc-sync-cli\n\n# (optional but recommended)\npython -m venv .venv &amp;&amp; source .venv/bin/activate\n\n# Editable install so changes are picked up immediately\npip install -e .[cli]\n\n# 2. Create an empty private repository on GitHub (or GitLab, Gitea\u2026)\n\n# 3. Initialise sync on the *first* machine\nvsc-sync init git@github.com:your-user/dotfiles-vscode.git\n\n# 4. Tweak VS Code to your liking\n\n# 5. Persist changes to the repo\nvsc-sync edit -m \"Initial VS Code setup\"\n\n# 6. On any *other* machine (with vsc-sync installed)\nvsc-sync apply\n</code></pre> <p>Repeat steps 4\u20135 whenever you modify your local VS Code configuration.  On other machines simply run <code>vsc-sync apply</code> to pull the updates.</p>"}]}